type Enumerate<N extends number, Acc extends number[] = []> = Acc['length'] extends N ? Acc[number] : Enumerate<N, [...Acc, Acc['length']]>;
type IntRange<F extends number, T extends number> = Exclude<Enumerate<T>, Enumerate<F>>;
type VALID_COST = IntRange<4, 32>;
/**
 * Custom error type for cryptographic assertions.
 *
 * This error is thrown when a runtime condition expected to hold true (for example,
 * when validating the password length) does not. It contains additional information
 * about the actual and expected values.
 *
 * @example
 * throw new CryptoAssertError("Password must not be empty", actual, expected);
 */
export declare class CryptoAssertError extends Error {
    actual: any;
    expected: any;
    constructor(message: string, actual?: any, expected?: any);
}
/**
 * Hashes a password using the bcrypt algorithm.
 *
 * The password is first UTF‑8 encoded. According to the bcrypt specification, only the first 72 bytes
 * of the input are used—including a required null terminator. Therefore, the UTF‑8 encoding of the password
 * must be no more than 71 bytes. A null terminator is appended, a salt is generated, and the password is
 * hashed using the `cryptRaw` function. The resulting hash is then encoded using bcrypt’s custom Base64
 * alphabet and formatted into a string of the form:
 * "$2b$<cost>$<22-character-salt><31-character-hash>".
 *
 * @param password The plaintext password.
 * @param cost The cost factor (default is 10).
 * @returns The full bcrypt hash string.
 *
 * @throws {CryptoAssertError} If the password is empty, its UTF‑8 encoding (plus the null terminator)
 * exceeds 72 bytes, or if the cost factor is not between 4 and 31.
 *
 * @example
 * const hashed = hash("mySecretPassword", 12);
 * console.log(hashed);
 */
export declare function hash(password: string, cost?: VALID_COST): string;
/**
 * Compares a plaintext password with a given bcrypt hash.
 *
 * This function validates the hash format, extracts the cost and salt, and computes a new hash
 * from the provided password. The password is first UTF‑8 encoded and a null terminator is appended.
 * As specified by bcrypt, the UTF‑8 encoding of the password must be at most 71 bytes so that the total
 * (including the null terminator) does not exceed 72 bytes. A constant‑time comparison is then performed
 * to mitigate timing attacks.
 *
 * @param password The plaintext password.
 * @param hash The full bcrypt hash string.
 * @returns `true` if the password matches the hash, `false` otherwise.
 *
 * @throws {CryptoAssertError} If the password is empty, its UTF‑8 encoding (plus the null terminator)
 * exceeds 72 bytes, if the cost factor is not between 4 and 31, or if the salt is not exactly 16 bytes.
 *
 * @example
 * if (compare("mySecretPassword", storedHash)) {
 *   console.log("Password match!");
 * } else {
 *   console.log("Invalid password.");
 * }
 */
export declare function compare(password: string, hash: string): boolean;
export {};
